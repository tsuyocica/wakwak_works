<div class="container mt-5" data-job-post-id="<%= @job_post.id %>">
  <!-- 案件タイトル -->
  <h1 class="fw-bold fs-4 text-center text-dark p-3 rounded" style="background-color: #f8f9fa;">
    <%= @job_post.work_title %>
  </h1>

  <!-- 応募者一覧タイトル -->
  <h3 class="fw-bold fs-4 text-center bg-light p-2 rounded shadow-sm mt-4">
    応募者一覧
  </h3>

  <!-- 応募者テーブル -->
  <table class="table table-striped mt-3">
    <thead>
      <tr>
        <th class="text-center">応募日時</th>
        <th class="text-center">応募者</th>
        <th class="text-center">経験・スキル</th>
        <th class="text-center">応募の状態</th>
        <th class="text-center">チャットルーム</th>
      </tr>
    </thead>
    <tbody>
      <% @applicants.each do |application| %>
        <tr id="job-application-<%= application.id %>">
          <%# 応募日時 %>
          <td class="text-center align-middle"><%= application.created_at.strftime('%Y/%m/%d %H:%M') %></td>

          <%# 応募者名（マイページへのリンク） %>
          <td class="text-center align-middle ">
            <%= link_to application.worker.username, user_path(application.worker), class: "text-dark text-decoration-none fw-bold" %>
          </td>

          <%# 経験・スキル %>
          <td class="text-center align-middle"><%= truncate(application.worker.experience, length: 50, omission: "…") %></td>

          <%# 応募の状態（非同期更新ボタン + アイコン）%>
          <td class="text-center align-middle">
            <div class="d-flex justify-content-center align-items-center gap-2">
              <select class="form-select border-0 bg-transparent w-auto status-select"
                data-application-id="<%= application.id %>"
                data-chat-target="#chat-room-<%= application.id %>"
                data-status-icon="#status-icon-<%= application.id %>"
                style="min-width: 100px;">
                <option value="pending" <%= "selected" if application.status == "pending" %>>未承認</option>
                <option value="approved" <%= "selected" if application.status == "approved" %>>承認</option>
                <option value="rejected" <%= "selected" if application.status == "rejected" %>>却下</option>
              </select>
              <span id="status-icon-<%= application.id %>">
                <% if application.status == "approved" %>
                  <i class="bi bi-check-circle-fill text-success"></i> <!-- 承認（緑） -->
                <% elsif application.status == "rejected" %>
                  <i class="bi bi-x-circle-fill text-danger"></i> <!-- 却下（赤） -->
                <% end %>
              </span>
            </div>
          </td>

          <%# チャットルーム（承認済みならリンク表示） %>
          <td class="text-center align-middle chat-room" id="chat-room-<%= application.id %>">
            <% chat = Chat.find_by(job_post: application.job_post, worker: application.worker) %>
            <% if application.status == "approved" %>
              <% if chat.present? %>
                <%= link_to "チャットを開く", chat_path(chat), class: "btn btn-success btn-sm chat-room-link" %>
              <% else %>
                <%= form_with url: chats_path, method: :post, local: true do |form| %>
                  <%= form.hidden_field :job_post_id, value: application.job_post.id %>
                  <%= form.hidden_field :worker_id, value: application.worker.id %>
                  <%= form.submit "チャットを作成", class: "btn btn-primary btn-sm" %>
                <% end %>
              <% end %>
            <% else %>
              <span class="text-muted">-</span>
            <% end %>
          </td>
        </tr>
      <% end %>
    </tbody>
  </table>
</div>

<script>
  document.addEventListener("turbo:load", function () {
    console.log("✅ Job Applications Script Loaded!");

    // ✅ 既存のイベントを削除してから、新しく追加する
    document.querySelectorAll(".status-select").forEach(selectElement => {
      selectElement.removeEventListener("change", handleStatusChange);
      selectElement.addEventListener("change", handleStatusChange);
    });

    // ✅ MutationObserver で新しく追加された要素にも適用
    const observer = new MutationObserver(mutations => {
      mutations.forEach(mutation => {
        mutation.addedNodes.forEach(node => {
          if (node.nodeType === 1 && node.matches(".status-select")) {
          node.removeEventListener("change", handleStatusChange);
          node.addEventListener("change", handleStatusChange);
          }
        });
      });
    });

    observer.observe(document.body, { childList: true, subtree: true });
  });

  // ✅ 状態更新処理（fetch API を使用）
  function handleStatusChange(event) {
    const selectElement = event.target;
    const applicationId = selectElement.dataset.applicationId;
    const jobPostId = document.querySelector("[data-job-post-id]").dataset.jobPostId;
    const newStatus = selectElement.value;
    const chatRoomCell = document.querySelector(selectElement.dataset.chatTarget);
    const statusIcon = document.querySelector(selectElement.dataset.statusIcon);

    if (!jobPostId || jobPostId === "0") {
      console.error("❌ job_post_id が無効です:", jobPostId);
      return;
    }

    fetch(`/job_posts/${jobPostId}/job_applications/${applicationId}/update_status`, {
      method: "PATCH",
      headers: {
        "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').content,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ status: newStatus }),
    })
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        if (data.success) {
          console.log("✅ 応募の状態更新成功:", data.status);

          // ✅ アイコンの更新
          if (statusIcon) {
            statusIcon.innerHTML =
              data.status === "approved"
                ? `<i class="bi bi-check-circle-fill text-success"></i>`
                : data.status === "rejected"
                ? `<i class="bi bi-x-circle-fill text-danger"></i>`
                : "";
          }

          // ✅ チャットルームのボタンを動的に変更
          if (chatRoomCell) {
            if (data.status === "approved") {
              chatRoomCell.innerHTML = `
                <form action="/chats" method="POST">
                  <input type="hidden" name="authenticity_token" value="${
                    document.querySelector('meta[name="csrf-token"]').content
                  }">
                  <input type="hidden" name="job_post_id" value="${jobPostId}">
                  <input type="hidden" name="worker_id" value="${data.worker_id}">
                  <button type="submit" class="btn btn-primary btn-sm">チャットを作成</button>
                </form>
              `;
            } else {
              chatRoomCell.innerHTML = `<span class="text-muted">-</span>`;
            }
          }

        // ✅ `turbo-frame` をリロードして即座に変更を反映
        const turboFrame = document.querySelector("turbo-frame");
        if (turboFrame) {
          turboFrame.reload();
        }

        } else {
          alert("⚠️ 更新に失敗しました");
        }
      })
      .catch(error => {
        console.error("❌ エラー:", error);
      });
  }
</script>